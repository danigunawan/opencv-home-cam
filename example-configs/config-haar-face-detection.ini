# Sample config used to detect faces from a low fps input.
# The detected frames will be emailed to a receipent with the sendemail.sh
# script.

[recorder0]

# Path to directory where all recording will be stored
recording_dir=recordings

# The file base name of the recordings.
# Each created file will have a name according to the format:
# $recording_file_base%d.avi
recording_file_base=my_avi_dump

# The file limit of recording files.
# If the number of recordings exceeds this limit, old recordings will be
# removed.
file_limit=10

# The time limit in seconds of a recording.
# If the number of frames exceeds the time limit times fps, a new recording
# file will be created.
time_limit=30

[camera0]

# The camera ID that will be used by OpenCV to open the camera device.
# On systems with only one camera (built-in camera in laptops etc.) the
# ID is usually 0.
id=0

# The capture rate in frames per second.
# This is how often images will be read from the input device.
# If the value exceeds the maximum fps supported by the recording
# device, the fps will be clamped to the maximum supported value.
fps=2

# An (optional) recorder associated with the camera.
# The corresponding recorder must have a recorder%d section.
recorder=recorder0

# A comma separated list of detectors for this camera.
# All frames captured by this camera will be passed to all detectors in
# the list.
# Each detector must have a corresponding detector%d section.
detectors=detector0

[detector0]

# The object detection algorithm used by the detector
# Valid values are:
# haar
# hog-people
detector_type=haar

# These options are directly related to OpenCV's Haar cascade detection
# functionality. They can safely be ignored unless the Haar cascade
# detection is going to be tweaked (performance etc.)
#scale_factor=1.1
#min_neighbours=3
#size=3

# Haar cascade files (xml) that will be used by opencv in the detection.
# This option is only applicable if detector_type is haar-cascade
cascade=haar-cascades/haarcascade_frontalface_default.xml

[action0]

# Action command.
# The script/program will be invoked as soon as the trigger condition
# is fulfilled.
# The script/program must not block indefinitely, since this will cause
# opencv-home-cam to block.
command=./example-actions/sendemail.sh

# A comma separated list of detectors for this action.
# The detectors must have a corresponding detector%d section.
detectors=detector0

# Action script triggers.
# A comma separated list of triggers for the action.
# Default value is "detect"
triggers=detect

# Save the frame (as a jpg image) that caused the action script to be
# launched. The image path is passed to the script via the IMAGE_PATH
# environment variable. The image will be deleted as soon as the action
# script is terminated.
save_frame=1

# The cool-down in seconds for this action.
# The action will not be invoked unless at least cool_down seconds has
# elapsed since the last invocation.
cool_down_time=5.0
